import{F as g,c as k,d,m as C,r as n,g as o,l as T,a as l}from"./library.MDn1VkXg.js";import{V as I,a as A,b as E}from"./VorbisParser.DPFTL9nF.js";import{A as S}from"./AbstractID3Parser.COOd5Mzd.js";import"./jsx-runtime.D_zvdyIk.js";import"./title.Zzc6FAcR.js";import"./index.DQLiH3RP.js";import"./createLucideIcon.DxLV4sYg.js";import"./button.Db3GhhwO.js";import"./card.gw5NK2rv.js";import"./dropdown-menu.COVBS5Vz.js";import"./index.CKCoq1tz.js";import"./index.B8Cg28y-.js";import"./index.C-Vi51-h.js";import"./index.CKz0Jdri.js";import"./index.CNoT2JK1.js";import"./dialog.CUSjS07t.js";import"./input.CNO_L4t5.js";import"./index.Bv7MI9QC.js";import"./client.BsjXsuL3.js";import"./loader-circle.BgR7_kSm.js";import"./trash-2.4YVattyp.js";import"./ID3v2Parser.DIx2C7sD.js";const u=k("music-metadata:parser:FLAC");class c extends C("FLAC"){}const r={STREAMINFO:0,PADDING:1,APPLICATION:2,SEEKTABLE:3,VORBIS_COMMENT:4,CUESHEET:5,PICTURE:6};class q extends S{constructor(){super(...arguments),this.vorbisParser=new I(this.metadata,this.options),this.padding=0}async postId3v2Parse(){if((await this.tokenizer.readToken(g)).toString()!=="fLaC")throw new c("Invalid FLAC preamble");this.metadata.setAudioOnly();let a;do a=await this.tokenizer.readToken(P),await this.parseDataBlock(a);while(!a.lastBlock);if(this.tokenizer.fileInfo.size&&this.metadata.format.duration){const i=this.tokenizer.fileInfo.size-this.tokenizer.position;this.metadata.setFormat("bitrate",8*i/this.metadata.format.duration)}}async parseDataBlock(t){switch(u(`blockHeader type=${t.type}, length=${t.length}`),t.type){case r.STREAMINFO:return this.parseBlockStreamInfo(t.length);case r.PADDING:this.padding+=t.length;break;case r.APPLICATION:break;case r.SEEKTABLE:break;case r.VORBIS_COMMENT:return this.parseComment(t.length);case r.CUESHEET:break;case r.PICTURE:await this.parsePicture(t.length);return;default:this.metadata.addWarning(`Unknown block type: ${t.type}`)}return this.tokenizer.ignore(t.length).then()}async parseBlockStreamInfo(t){if(t!==h.len)throw new c("Unexpected block-stream-info length");const a=await this.tokenizer.readToken(h);this.metadata.setFormat("container","FLAC"),this.metadata.setFormat("codec","FLAC"),this.metadata.setFormat("lossless",!0),this.metadata.setFormat("numberOfChannels",a.channels),this.metadata.setFormat("bitsPerSample",a.bitsPerSample),this.metadata.setFormat("sampleRate",a.sampleRate),a.totalSamples>0&&this.metadata.setFormat("duration",a.totalSamples/a.sampleRate)}async parseComment(t){const a=await this.tokenizer.readToken(new d(t)),i=new A(a,0);i.readStringUtf8();const m=i.readInt32(),p=new Array(m);for(let s=0;s<m;s++)p[s]=i.parseUserComment();await Promise.all(p.map(s=>this.vorbisParser.addTag(s.key,s.value)))}async parsePicture(t){if(this.options.skipCovers)return this.tokenizer.ignore(t);const a=await this.tokenizer.readToken(new E(t));this.vorbisParser.addTag("METADATA_BLOCK_PICTURE",a)}}const P={len:4,get:(e,t)=>({lastBlock:T(e,t,7),type:o(e,t,1,7),length:n.get(e,t+1)})},h={len:34,get:(e,t)=>({minimumBlockSize:l.get(e,t),maximumBlockSize:l.get(e,t+2)/1e3,minimumFrameSize:n.get(e,t+4),maximumFrameSize:n.get(e,t+7),sampleRate:n.get(e,t+10)>>4,channels:o(e,t+12,4,3)+1,bitsPerSample:o(e,t+12,7,5)+1,totalSamples:o(e,t+13,4,36),fileMD5:new d(16).get(e,t+18)})};export{q as FlacParser};
