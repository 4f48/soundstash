import{m as k,a as m,U as h,F as l,b as w,S as u,B as F,c as I,E as C,d as T,o as z}from"./library.MDn1VkXg.js";import{I as g}from"./ID3v2Parser.DIx2C7sD.js";import"./jsx-runtime.D_zvdyIk.js";import"./title.Zzc6FAcR.js";import"./index.DQLiH3RP.js";import"./createLucideIcon.DxLV4sYg.js";import"./button.Db3GhhwO.js";import"./card.gw5NK2rv.js";import"./dropdown-menu.COVBS5Vz.js";import"./index.CKCoq1tz.js";import"./index.B8Cg28y-.js";import"./index.C-Vi51-h.js";import"./index.CKz0Jdri.js";import"./index.CNoT2JK1.js";import"./dialog.CUSjS07t.js";import"./input.CNO_L4t5.js";import"./index.Bv7MI9QC.js";import"./client.BsjXsuL3.js";import"./loader-circle.BgR7_kSm.js";import"./trash-2.4YVattyp.js";const A={NONE:"not compressed	PCM	Apple Computer",sowt:"PCM (byte swapped)",fl32:"32-bit floating point IEEE 32-bit float",fl64:"64-bit floating point IEEE 64-bit float	Apple Computer",alaw:"ALaw 2:1	8-bit ITU-T G.711 A-law",ulaw:"µLaw 2:1	8-bit ITU-T G.711 µ-law	Apple Computer",ULAW:"CCITT G.711 u-law 8-bit ITU-T G.711 µ-law",ALAW:"CCITT G.711 A-law 8-bit ITU-T G.711 A-law",FL32:"Float 32	IEEE 32-bit float "};class r extends k("AIFF"){}class S{constructor(t,e){this.isAifc=e;const a=e?22:18;if(t.chunkSize<a)throw new r(`COMMON CHUNK size should always be at least ${a}`);this.len=t.chunkSize}get(t,e){const a=m.get(t,e+8)-16398,s=m.get(t,e+8+2),i={numChannels:m.get(t,e),numSampleFrames:h.get(t,e+2),sampleSize:m.get(t,e+6),sampleRate:a<0?s>>Math.abs(a):s<<a};if(this.isAifc){if(i.compressionType=l.get(t,e+18),this.len>22){const o=w.get(t,e+22);if(o>0){const d=(o+1)%2;if(23+o+d===this.len)i.compressionName=new u(o,"latin1").get(t,e+23);else throw new r("Illegal pstring length")}else i.compressionName=void 0}}else i.compressionName="PCM";return i}}const p={len:8,get:(n,t)=>({chunkID:l.get(n,t),chunkSize:Number(BigInt(h.get(n,t+4)))})},c=I("music-metadata:parser:aiff");class K extends F{constructor(){super(...arguments),this.isCompressed=null}async parse(){if((await this.tokenizer.readToken(p)).chunkID!=="FORM")throw new r("Invalid Chunk-ID, expected 'FORM'");const e=await this.tokenizer.readToken(l);switch(e){case"AIFF":this.metadata.setFormat("container",e),this.isCompressed=!1;break;case"AIFC":this.metadata.setFormat("container","AIFF-C"),this.isCompressed=!0;break;default:throw new r(`Unsupported AIFF type: ${e}`)}this.metadata.setFormat("lossless",!this.isCompressed),this.metadata.setAudioOnly();try{for(;!this.tokenizer.fileInfo.size||this.tokenizer.fileInfo.size-this.tokenizer.position>=p.len;){c(`Reading AIFF chunk at offset=${this.tokenizer.position}`);const a=await this.tokenizer.readToken(p),s=2*Math.round(a.chunkSize/2),i=await this.readData(a);await this.tokenizer.ignore(s-i)}}catch(a){if(a instanceof C)c("End-of-stream");else throw a}}async readData(t){switch(t.chunkID){case"COMM":{if(this.isCompressed===null)throw new r("Failed to parse AIFF.COMM chunk when compression type is unknown");const e=await this.tokenizer.readToken(new S(t,this.isCompressed));return this.metadata.setFormat("bitsPerSample",e.sampleSize),this.metadata.setFormat("sampleRate",e.sampleRate),this.metadata.setFormat("numberOfChannels",e.numChannels),this.metadata.setFormat("numberOfSamples",e.numSampleFrames),this.metadata.setFormat("duration",e.numSampleFrames/e.sampleRate),(e.compressionName||e.compressionType)&&this.metadata.setFormat("codec",e.compressionName??A[e.compressionType]),t.chunkSize}case"ID3 ":{const e=await this.tokenizer.readToken(new T(t.chunkSize)),a=z(e);return await new g().parse(this.metadata,a,this.options),t.chunkSize}case"SSND":return this.metadata.format.duration&&this.metadata.setFormat("bitrate",8*t.chunkSize/this.metadata.format.duration),0;case"NAME":case"AUTH":case"(c) ":case"ANNO":return this.readTextChunk(t);default:return c(`Ignore chunk id=${t.chunkID}, size=${t.chunkSize}`),0}}async readTextChunk(t){const a=(await this.tokenizer.readToken(new u(t.chunkSize,"ascii"))).split("\0").map(s=>s.trim()).filter(s=>s?.length);return await Promise.all(a.map(s=>this.metadata.addTag("AIFF",t.chunkID,s))),t.chunkSize}}export{K as AIFFParser};
